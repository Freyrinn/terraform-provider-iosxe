// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type EVPN struct {
	Device                                             types.String `tfsdk:"device"`
	Id                                                 types.String `tfsdk:"id"`
	ReplicationTypeReplicationTypeChoiceIngressIngress types.Bool   `tfsdk:"replication_type_ingress"`
	ReplicationTypeReplicationTypeChoiceStaticStatic   types.Bool   `tfsdk:"replication_type_static"`
	ReplicationTypeReplicationTypeChoiceP2mpP2mp       types.Bool   `tfsdk:"replication_type_p2mp"`
	ReplicationTypeReplicationTypeChoiceMp2mpMp2mp     types.Bool   `tfsdk:"replication_type_mp2mp"`
	MacDuplicationLimit                                types.Int64  `tfsdk:"mac_duplication_limit"`
	MacDuplicationTime                                 types.Int64  `tfsdk:"mac_duplication_time"`
	IpDuplicationLimit                                 types.Int64  `tfsdk:"ip_duplication_limit"`
	IpDuplicationTime                                  types.Int64  `tfsdk:"ip_duplication_time"`
	RouterIdInterfaceInterfaceChoiceLoopbackLoopback   types.Int64  `tfsdk:"router_id_loopback"`
	DefaultGatewayAdvertise                            types.Bool   `tfsdk:"default_gateway_advertise"`
	LoggingPeerState                                   types.Bool   `tfsdk:"logging_peer_state"`
	RouteTargetAutoVni                                 types.Bool   `tfsdk:"route_target_auto_vni"`
}

func (data EVPN) getPath() string {
	return "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn"
}

func (data EVPN) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.ReplicationTypeReplicationTypeChoiceIngressIngress.Null && !data.ReplicationTypeReplicationTypeChoiceIngressIngress.Unknown {
		if data.ReplicationTypeReplicationTypeChoiceIngressIngress.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.ingress", map[string]string{})
		}
	}
	if !data.ReplicationTypeReplicationTypeChoiceStaticStatic.Null && !data.ReplicationTypeReplicationTypeChoiceStaticStatic.Unknown {
		if data.ReplicationTypeReplicationTypeChoiceStaticStatic.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.static", map[string]string{})
		}
	}
	if !data.ReplicationTypeReplicationTypeChoiceP2mpP2mp.Null && !data.ReplicationTypeReplicationTypeChoiceP2mpP2mp.Unknown {
		if data.ReplicationTypeReplicationTypeChoiceP2mpP2mp.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.p2mp", map[string]string{})
		}
	}
	if !data.ReplicationTypeReplicationTypeChoiceMp2mpMp2mp.Null && !data.ReplicationTypeReplicationTypeChoiceMp2mpMp2mp.Unknown {
		if data.ReplicationTypeReplicationTypeChoiceMp2mpMp2mp.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.mp2mp", map[string]string{})
		}
	}
	if !data.MacDuplicationLimit.Null && !data.MacDuplicationLimit.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mac.duplication.limit", strconv.FormatInt(data.MacDuplicationLimit.Value, 10))
	}
	if !data.MacDuplicationTime.Null && !data.MacDuplicationTime.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mac.duplication.time", strconv.FormatInt(data.MacDuplicationTime.Value, 10))
	}
	if !data.IpDuplicationLimit.Null && !data.IpDuplicationLimit.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.duplication.limit", strconv.FormatInt(data.IpDuplicationLimit.Value, 10))
	}
	if !data.IpDuplicationTime.Null && !data.IpDuplicationTime.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.duplication.time", strconv.FormatInt(data.IpDuplicationTime.Value, 10))
	}
	if !data.RouterIdInterfaceInterfaceChoiceLoopbackLoopback.Null && !data.RouterIdInterfaceInterfaceChoiceLoopbackLoopback.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"router-id.interface.Loopback", strconv.FormatInt(data.RouterIdInterfaceInterfaceChoiceLoopbackLoopback.Value, 10))
	}
	if !data.DefaultGatewayAdvertise.Null && !data.DefaultGatewayAdvertise.Unknown {
		if data.DefaultGatewayAdvertise.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"default-gateway.advertise", map[string]string{})
		}
	}
	if !data.LoggingPeerState.Null && !data.LoggingPeerState.Unknown {
		if data.LoggingPeerState.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"logging.peer.state", map[string]string{})
		}
	}
	if !data.RouteTargetAutoVni.Null && !data.RouteTargetAutoVni.Unknown {
		if data.RouteTargetAutoVni.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.auto.vni", map[string]string{})
		}
	}
	return body
}

func (data *EVPN) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "replication-type.ingress"); value.Exists() {
		data.ReplicationTypeReplicationTypeChoiceIngressIngress.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "replication-type.static"); value.Exists() {
		data.ReplicationTypeReplicationTypeChoiceStaticStatic.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "replication-type.p2mp"); value.Exists() {
		data.ReplicationTypeReplicationTypeChoiceP2mpP2mp.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "replication-type.mp2mp"); value.Exists() {
		data.ReplicationTypeReplicationTypeChoiceMp2mpMp2mp.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "mac.duplication.limit"); value.Exists() {
		data.MacDuplicationLimit.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "mac.duplication.time"); value.Exists() {
		data.MacDuplicationTime.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "ip.duplication.limit"); value.Exists() {
		data.IpDuplicationLimit.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "ip.duplication.time"); value.Exists() {
		data.IpDuplicationTime.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "router-id.interface.Loopback"); value.Exists() {
		data.RouterIdInterfaceInterfaceChoiceLoopbackLoopback.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "default-gateway.advertise"); value.Exists() {
		data.DefaultGatewayAdvertise.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "logging.peer.state"); value.Exists() {
		data.LoggingPeerState.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "route-target.auto.vni"); value.Exists() {
		data.RouteTargetAutoVni.Value = true
	}
}

func (data *EVPN) fromPlan(plan EVPN) {
	data.Device = plan.Device
}

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"sort"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type StaticRoute struct {
	Device   types.String          `tfsdk:"device"`
	Id       types.String          `tfsdk:"id"`
	Prefix   types.String          `tfsdk:"prefix"`
	Mask     types.String          `tfsdk:"mask"`
	NextHops []StaticRouteNextHops `tfsdk:"next_hops"`
}
type StaticRouteNextHops struct {
	NextHop   types.String `tfsdk:"next_hop"`
	Metric    types.Int64  `tfsdk:"metric"`
	Global    types.Bool   `tfsdk:"global"`
	Name      types.String `tfsdk:"name"`
	Permanent types.Bool   `tfsdk:"permanent"`
	Tag       types.Int64  `tfsdk:"tag"`
}

func (data StaticRoute) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/ip/route/ip-route-interface-forwarding-list=%s,%s", data.Prefix.Value, data.Mask.Value)
}

// if last path element has a key -> remove it
func (data StaticRoute) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data StaticRoute) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Prefix.Null && !data.Prefix.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"prefix", data.Prefix.Value)
	}
	if !data.Mask.Null && !data.Mask.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mask", data.Mask.Value)
	}
	if len(data.NextHops) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list", []interface{}{})
		for index, item := range data.NextHops {
			if !item.NextHop.Null && !item.NextHop.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list"+"."+strconv.Itoa(index)+"."+"fwd", item.NextHop.Value)
			}
			if !item.Metric.Null && !item.Metric.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list"+"."+strconv.Itoa(index)+"."+"metric", strconv.FormatInt(item.Metric.Value, 10))
			}
			if !item.Global.Null && !item.Global.Unknown {
				if item.Global.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list"+"."+strconv.Itoa(index)+"."+"global", map[string]string{})
				}
			}
			if !item.Name.Null && !item.Name.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list"+"."+strconv.Itoa(index)+"."+"name", item.Name.Value)
			}
			if !item.Permanent.Null && !item.Permanent.Unknown {
				if item.Permanent.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list"+"."+strconv.Itoa(index)+"."+"permanent", map[string]string{})
				}
			}
			if !item.Tag.Null && !item.Tag.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fwd-list"+"."+strconv.Itoa(index)+"."+"tag", strconv.FormatInt(item.Tag.Value, 10))
			}
		}
	}
	return body
}

func (data *StaticRoute) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "fwd-list"); value.Exists() {
		data.NextHops = make([]StaticRouteNextHops, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := StaticRouteNextHops{}
			if cValue := v.Get("fwd"); cValue.Exists() {
				item.NextHop.Value = cValue.String()
			}
			if cValue := v.Get("metric"); cValue.Exists() {
				item.Metric.Value = cValue.Int()
			}
			if cValue := v.Get("global"); cValue.Exists() {
				item.Global.Value = true
			}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name.Value = cValue.String()
			}
			if cValue := v.Get("permanent"); cValue.Exists() {
				item.Permanent.Value = true
			}
			if cValue := v.Get("tag"); cValue.Exists() {
				item.Tag.Value = cValue.Int()
			}
			data.NextHops = append(data.NextHops, item)
			return true
		})
	}
}

func (data *StaticRoute) fromPlan(plan StaticRoute) {
	data.Device = plan.Device
	data.Prefix.Value = plan.Prefix.Value
	data.Mask.Value = plan.Mask.Value
	sort.SliceStable(data.NextHops, func(i, j int) bool {
		for ii := range plan.NextHops {
			if plan.NextHops[ii].NextHop.Value == data.NextHops[i].NextHop.Value {
				return true
			}
			if plan.NextHops[ii].NextHop.Value == data.NextHops[j].NextHop.Value {
				return false
			}
		}
		return false
	})
}

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type OSPF struct {
	Device                            types.String         `tfsdk:"device"`
	Id                                types.String         `tfsdk:"id"`
	YangId                            types.Int64          `tfsdk:"process_id"`
	BfdAllInterfaces                  types.Bool           `tfsdk:"bfd_all_interfaces"`
	DefaultInformationOriginate       types.Bool           `tfsdk:"default_information_originate"`
	DefaultInformationOriginateAlways types.Bool           `tfsdk:"default_information_originate_always"`
	DefaultMetric                     types.Int64          `tfsdk:"default_metric"`
	DistanceDistance                  types.Int64          `tfsdk:"distance"`
	DomainTag                         types.Int64          `tfsdk:"domain_tag"`
	MplsLdpAutoconfig                 types.Bool           `tfsdk:"mpls_ldp_autoconfig"`
	MplsLdpSync                       types.Bool           `tfsdk:"mpls_ldp_sync"`
	Neighbor                          []OSPFNeighbor       `tfsdk:"neighbor"`
	Network                           []OSPFNetwork        `tfsdk:"network"`
	Priority                          types.Int64          `tfsdk:"priority"`
	RouterId                          types.String         `tfsdk:"router_id"`
	Shutdown                          types.Bool           `tfsdk:"shutdown"`
	SummaryAddress                    []OSPFSummaryAddress `tfsdk:"summary_address"`
}
type OSPFNeighbor struct {
	Ip       types.String `tfsdk:"ip"`
	Priority types.Int64  `tfsdk:"priority"`
	Cost     types.Int64  `tfsdk:"cost"`
}
type OSPFNetwork struct {
	Ip       types.String `tfsdk:"ip"`
	Wildcard types.String `tfsdk:"wildcard"`
	Area     types.String `tfsdk:"area"`
}
type OSPFSummaryAddress struct {
	Ip   types.String `tfsdk:"ip"`
	Mask types.String `tfsdk:"mask"`
}

func (data OSPF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-ospf:router-ospf/ospf/process-id=%v", data.YangId.Value)
}

func (data OSPF) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"neighbor", []interface{}{})
	for index, item := range data.Neighbor {
		if !item.Ip.Null && !item.Ip.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"neighbor"+"."+strconv.Itoa(index)+"."+"ip", item.Ip.Value)
		}
		if !item.Priority.Null && !item.Priority.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"neighbor"+"."+strconv.Itoa(index)+"."+"priority", strconv.FormatInt(item.Priority.Value, 10))
		}
		if !item.Cost.Null && !item.Cost.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"neighbor"+"."+strconv.Itoa(index)+"."+"cost", strconv.FormatInt(item.Cost.Value, 10))
		}
	}
	body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network", []interface{}{})
	for index, item := range data.Network {
		if !item.Ip.Null && !item.Ip.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network"+"."+strconv.Itoa(index)+"."+"ip", item.Ip.Value)
		}
		if !item.Wildcard.Null && !item.Wildcard.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network"+"."+strconv.Itoa(index)+"."+"wildcard", item.Wildcard.Value)
		}
		if !item.Area.Null && !item.Area.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network"+"."+strconv.Itoa(index)+"."+"area", item.Area.Value)
		}
	}
	body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"summary-address", []interface{}{})
	for index, item := range data.SummaryAddress {
		if !item.Ip.Null && !item.Ip.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"summary-address"+"."+strconv.Itoa(index)+"."+"ip", item.Ip.Value)
		}
		if !item.Mask.Null && !item.Mask.Unknown {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"summary-address"+"."+strconv.Itoa(index)+"."+"mask", item.Mask.Value)
		}
	}
	if !data.YangId.Null && !data.YangId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"id", strconv.FormatInt(data.YangId.Value, 10))
	}
	if !data.BfdAllInterfaces.Null && !data.BfdAllInterfaces.Unknown {
		if data.BfdAllInterfaces.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"bfd.all-interfaces", map[string]string{})
		}
	}
	if !data.DefaultInformationOriginate.Null && !data.DefaultInformationOriginate.Unknown {
		if data.DefaultInformationOriginate.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"default-information.originate", map[string]string{})
		}
	}
	if !data.DefaultInformationOriginateAlways.Null && !data.DefaultInformationOriginateAlways.Unknown {
		if data.DefaultInformationOriginateAlways.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"default-information.originate.always", map[string]string{})
		}
	}
	if !data.DefaultMetric.Null && !data.DefaultMetric.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"default-metric", strconv.FormatInt(data.DefaultMetric.Value, 10))
	}
	if !data.DistanceDistance.Null && !data.DistanceDistance.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"distance.distance", strconv.FormatInt(data.DistanceDistance.Value, 10))
	}
	if !data.DomainTag.Null && !data.DomainTag.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"domain-tag", strconv.FormatInt(data.DomainTag.Value, 10))
	}
	if !data.MplsLdpAutoconfig.Null && !data.MplsLdpAutoconfig.Unknown {
		if data.MplsLdpAutoconfig.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mpls.ldp.autoconfig", map[string]string{})
		}
	}
	if !data.MplsLdpSync.Null && !data.MplsLdpSync.Unknown {
		if data.MplsLdpSync.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mpls.ldp.sync", map[string]string{})
		}
	}
	if !data.Priority.Null && !data.Priority.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"priority", strconv.FormatInt(data.Priority.Value, 10))
	}
	if !data.RouterId.Null && !data.RouterId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"router-id", data.RouterId.Value)
	}
	if !data.Shutdown.Null && !data.Shutdown.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"shutdown", data.Shutdown.Value)
	}
	return body
}

func (data *OSPF) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "bfd.all-interfaces"); value.Exists() {
		data.BfdAllInterfaces.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "default-information.originate"); value.Exists() {
		data.DefaultInformationOriginate.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "default-information.originate.always"); value.Exists() {
		data.DefaultInformationOriginateAlways.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "default-metric"); value.Exists() {
		data.DefaultMetric.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "distance.distance"); value.Exists() {
		data.DistanceDistance.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "domain-tag"); value.Exists() {
		data.DomainTag.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "mpls.ldp.autoconfig"); value.Exists() {
		data.MplsLdpAutoconfig.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "mpls.ldp.sync"); value.Exists() {
		data.MplsLdpSync.Value = true
	}
	data.Neighbor = make([]OSPFNeighbor, 0)
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "neighbor"); value.Exists() {
		value.ForEach(func(k, v gjson.Result) bool {
			item := OSPFNeighbor{}
			if cValue := v.Get("ip"); cValue.Exists() {
				item.Ip.Value = cValue.String()
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority.Value = cValue.Int()
			}
			if cValue := v.Get("cost"); cValue.Exists() {
				item.Cost.Value = cValue.Int()
			}
			data.Neighbor = append(data.Neighbor, item)
			return true
		})
	}
	data.Network = make([]OSPFNetwork, 0)
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "network"); value.Exists() {
		value.ForEach(func(k, v gjson.Result) bool {
			item := OSPFNetwork{}
			if cValue := v.Get("ip"); cValue.Exists() {
				item.Ip.Value = cValue.String()
			}
			if cValue := v.Get("wildcard"); cValue.Exists() {
				item.Wildcard.Value = cValue.String()
			}
			if cValue := v.Get("area"); cValue.Exists() {
				item.Area.Value = cValue.String()
			}
			data.Network = append(data.Network, item)
			return true
		})
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "priority"); value.Exists() {
		data.Priority.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "router-id"); value.Exists() {
		data.RouterId.Value = value.String()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "shutdown"); value.Exists() {
		data.Shutdown.Value = value.Bool()
	}
	data.SummaryAddress = make([]OSPFSummaryAddress, 0)
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "summary-address"); value.Exists() {
		value.ForEach(func(k, v gjson.Result) bool {
			item := OSPFSummaryAddress{}
			if cValue := v.Get("ip"); cValue.Exists() {
				item.Ip.Value = cValue.String()
			}
			if cValue := v.Get("mask"); cValue.Exists() {
				item.Mask.Value = cValue.String()
			}
			data.SummaryAddress = append(data.SummaryAddress, item)
			return true
		})
	}
}

func (data *OSPF) fromPlan(plan OSPF) {
	data.Device = plan.Device
	data.YangId.Value = plan.YangId.Value
}

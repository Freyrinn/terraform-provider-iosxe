// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type BGP struct {
	Device                                                               types.String `tfsdk:"device"`
	Id                                                                   types.String `tfsdk:"id"`
	YangId                                                               types.String `tfsdk:"asn"`
	BgpDefaultIpv4Unicast                                                types.Bool   `tfsdk:"default_ipv4_unicast"`
	BgpLogNeighborChanges                                                types.Bool   `tfsdk:"log_neighbor_changes"`
	BgpRouterIdIdChoiceInterfaceInterfaceInterfaceChoiceLoopbackLoopback types.Int64  `tfsdk:"router_id_loopback"`
}

func (data BGP) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=%v", data.YangId.Value)
}

func (data BGP) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.YangId.Null && !data.YangId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"id", data.YangId.Value)
	}
	if !data.BgpDefaultIpv4Unicast.Null && !data.BgpDefaultIpv4Unicast.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"bgp.default.ipv4-unicast", data.BgpDefaultIpv4Unicast.Value)
	}
	if !data.BgpLogNeighborChanges.Null && !data.BgpLogNeighborChanges.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"bgp.log-neighbor-changes", data.BgpLogNeighborChanges.Value)
	}
	if !data.BgpRouterIdIdChoiceInterfaceInterfaceInterfaceChoiceLoopbackLoopback.Null && !data.BgpRouterIdIdChoiceInterfaceInterfaceInterfaceChoiceLoopbackLoopback.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"bgp.router-id.interface.Loopback", strconv.FormatInt(data.BgpRouterIdIdChoiceInterfaceInterfaceInterfaceChoiceLoopbackLoopback.Value, 10))
	}
	return body
}

func (data *BGP) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "bgp.default.ipv4-unicast"); value.Exists() {
		data.BgpDefaultIpv4Unicast.Value = value.Bool()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "bgp.log-neighbor-changes"); value.Exists() {
		data.BgpLogNeighborChanges.Value = value.Bool()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "bgp.router-id.interface.Loopback"); value.Exists() {
		data.BgpRouterIdIdChoiceInterfaceInterfaceInterfaceChoiceLoopbackLoopback.Value = value.Int()
	}
}

func (data *BGP) fromPlan(plan BGP) {
	data.Device = plan.Device
	data.YangId.Value = plan.YangId.Value
}

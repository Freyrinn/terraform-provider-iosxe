// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VLAN struct {
	Device                 types.String `tfsdk:"device"`
	Id                     types.String `tfsdk:"id"`
	VlanId                 types.Int64  `tfsdk:"vlan_id"`
	RemoteSpan             types.Bool   `tfsdk:"remote_span"`
	PrivateVlanPrimary     types.Bool   `tfsdk:"private_vlan_primary"`
	PrivateVlanAssociation types.String `tfsdk:"private_vlan_association"`
	PrivateVlanCommunity   types.Bool   `tfsdk:"private_vlan_community"`
	PrivateVlanIsolated    types.Bool   `tfsdk:"private_vlan_isolated"`
	Name                   types.String `tfsdk:"name"`
	Shutdown               types.Bool   `tfsdk:"shutdown"`
}

func (data VLAN) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:vlan-list=%v", data.VlanId.Value)
}

// if last path element has a key -> remove it
func (data VLAN) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data VLAN) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.VlanId.Null && !data.VlanId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"id", strconv.FormatInt(data.VlanId.Value, 10))
	}
	if !data.RemoteSpan.Null && !data.RemoteSpan.Unknown {
		if data.RemoteSpan.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"remote-span", map[string]string{})
		}
	}
	if !data.PrivateVlanPrimary.Null && !data.PrivateVlanPrimary.Unknown {
		if data.PrivateVlanPrimary.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"private-vlan.primary", map[string]string{})
		}
	}
	if !data.PrivateVlanAssociation.Null && !data.PrivateVlanAssociation.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"private-vlan.association", data.PrivateVlanAssociation.Value)
	}
	if !data.PrivateVlanCommunity.Null && !data.PrivateVlanCommunity.Unknown {
		if data.PrivateVlanCommunity.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"private-vlan.community", map[string]string{})
		}
	}
	if !data.PrivateVlanIsolated.Null && !data.PrivateVlanIsolated.Unknown {
		if data.PrivateVlanIsolated.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"private-vlan.isolated", map[string]string{})
		}
	}
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.Value)
	}
	if !data.Shutdown.Null && !data.Shutdown.Unknown {
		if data.Shutdown.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"shutdown", map[string]string{})
		}
	}
	return body
}

func (data *VLAN) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "remote-span"); value.Exists() {
		data.RemoteSpan.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "private-vlan.primary"); value.Exists() {
		data.PrivateVlanPrimary.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "private-vlan.association"); value.Exists() {
		data.PrivateVlanAssociation.Value = value.String()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "private-vlan.community"); value.Exists() {
		data.PrivateVlanCommunity.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "private-vlan.isolated"); value.Exists() {
		data.PrivateVlanIsolated.Value = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "name"); value.Exists() {
		data.Name.Value = value.String()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "shutdown"); value.Exists() {
		data.Shutdown.Value = true
	}
}

func (data *VLAN) fromPlan(plan VLAN) {
	data.Device = plan.Device
	data.VlanId.Value = plan.VlanId.Value
}

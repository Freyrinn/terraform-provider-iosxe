// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VLANConfiguration struct {
	Device                         types.String `tfsdk:"device"`
	Id                             types.String `tfsdk:"id"`
	VlanId                         types.String `tfsdk:"vlan_id"`
	MemberVni                      types.Int64  `tfsdk:"vni"`
	MemberAccessVfi                types.String `tfsdk:"access_vfi"`
	MemberEvpnInstanceEvpnInstance types.Int64  `tfsdk:"evpn_instance"`
	MemberEvpnInstanceVni          types.Int64  `tfsdk:"evpn_instance_vni"`
}

func (data VLANConfiguration) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/vlan/ios-vlan:configuration-entry=%v", data.VlanId.Value)
}

func (data VLANConfiguration) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.VlanId.Null && !data.VlanId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vlan-id", data.VlanId.Value)
	}
	if !data.MemberVni.Null && !data.MemberVni.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"member.vni", strconv.FormatInt(data.MemberVni.Value, 10))
	}
	if !data.MemberAccessVfi.Null && !data.MemberAccessVfi.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"member.access-vfi", data.MemberAccessVfi.Value)
	}
	if !data.MemberEvpnInstanceEvpnInstance.Null && !data.MemberEvpnInstanceEvpnInstance.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"member.evpn-instance.evpn-instance", strconv.FormatInt(data.MemberEvpnInstanceEvpnInstance.Value, 10))
	}
	if !data.MemberEvpnInstanceVni.Null && !data.MemberEvpnInstanceVni.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"member.evpn-instance.vni", strconv.FormatInt(data.MemberEvpnInstanceVni.Value, 10))
	}
	return body
}

func (data *VLANConfiguration) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "member.vni"); value.Exists() {
		data.MemberVni.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "member.access-vfi"); value.Exists() {
		data.MemberAccessVfi.Value = value.String()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "member.evpn-instance.evpn-instance"); value.Exists() {
		data.MemberEvpnInstanceEvpnInstance.Value = value.Int()
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "member.evpn-instance.vni"); value.Exists() {
		data.MemberEvpnInstanceVni.Value = value.Int()
	}
}

func (data *VLANConfiguration) fromPlan(plan VLANConfiguration) {
	data.Device = plan.Device
	data.VlanId.Value = plan.VlanId.Value
}
